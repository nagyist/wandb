# Generated by ariadne-codegen
# Source: tools/graphql_codegen/artifacts/

from __future__ import annotations

from typing import Any, Literal

from pydantic import Field

from .base import GQLBase, GQLId, SerializedToJson, Typename
from .enums import ArtifactState
from .typing_compat import Annotated


class AliasFragment(GQLBase):
    artifact_collection: (
        Annotated[
            AliasFragmentArtifactCollectionArtifactCollection
            | AliasFragmentArtifactCollectionArtifactPortfolio
            | AliasFragmentArtifactCollectionArtifactSequence,
            Field(discriminator="typename__"),
        ]
        | None
    ) = Field(alias="artifactCollection")
    alias: str


class AliasFragmentArtifactCollectionArtifactCollection(GQLBase):
    typename__: Typename[Literal["ArtifactCollection"]]


class ArtifactFields(GQLBase):
    id: GQLId
    artifact_sequence: ArtifactSequenceFragment = Field(alias="artifactSequence")
    version_index: int | None = Field(alias="versionIndex")
    artifact_type: ArtifactFieldsArtifactType = Field(alias="artifactType")
    description: str | None
    metadata: SerializedToJson | None
    ttl_duration_seconds: Any = Field(alias="ttlDurationSeconds")
    ttl_is_inherited: bool = Field(alias="ttlIsInherited")
    aliases: list[AliasFragment]
    tags: list[TagFragment]
    state: ArtifactState
    current_manifest: ManifestFragment | None = Field(alias="currentManifest")
    commit_hash: str | None = Field(alias="commitHash")
    file_count: Any = Field(alias="fileCount")
    created_at: Any = Field(alias="createdAt")
    updated_at: Any | None = Field(alias="updatedAt")


class ArtifactFieldsArtifactType(GQLBase):
    name: str


class ArtifactPortfolioFragment(GQLBase):
    typename__: Typename[str]
    project: ProjectFragment | None
    name: str


class ArtifactSequenceFragment(GQLBase):
    typename__: Typename[str]
    project: ProjectFragment | None
    name: str


class ManifestFragment(GQLBase):
    file: ManifestFragmentFile


class ManifestFragmentFile(GQLBase):
    direct_url: str = Field(alias="directUrl")


class ProjectFragment(GQLBase):
    entity_name: str = Field(alias="entityName")
    name: str


class TagFragment(GQLBase):
    name: str


class AliasFragmentArtifactCollectionArtifactPortfolio(ArtifactPortfolioFragment):
    typename__: Typename[Literal["ArtifactPortfolio"]]


class AliasFragmentArtifactCollectionArtifactSequence(ArtifactSequenceFragment):
    typename__: Typename[Literal["ArtifactSequence"]]


AliasFragment.model_rebuild()
ArtifactFields.model_rebuild()
ArtifactPortfolioFragment.model_rebuild()
ArtifactSequenceFragment.model_rebuild()
ManifestFragment.model_rebuild()
ProjectFragment.model_rebuild()
TagFragment.model_rebuild()
